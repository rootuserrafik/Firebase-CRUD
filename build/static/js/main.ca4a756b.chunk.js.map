{"version":3,"sources":["Header.js","Home.js","Insert.js","farebase.js","View.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Home","Insert","props","useState","fname","fphone","Values","setValues","handlerInputChangle","e","target","name","value","autoComplete","onSubmit","preventDefault","addOrEdit","for","onChange","type","fireDB","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","ref","View","obj","firebaseDB","child","push","err","console","log","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4VAmBeA,MAff,WACI,OACI,yBAAKC,UAAU,eACX,yBAAKA,UAAU,gBACX,4BACI,4BAAI,kBAAC,IAAD,CAAMC,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,WAAT,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,SAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,UAAT,e,MCETC,MAVf,WACI,OACI,yBAAKF,UAAU,QACX,4DACA,0EACA,kBAAC,IAAD,CAAMC,GAAG,WAAU,yD,wBC0BhBE,G,MAhCA,SAACC,GACZ,IADsB,EAMIC,mBALC,CACvBC,MAAO,GACPC,OAAQ,KAHU,mBAMjBC,EANiB,KAMTC,EANS,KAQhBC,EAAsB,SAACC,GAAO,IAAD,EACXA,EAAEC,OAAjBC,EAD0B,EAC1BA,KAAMC,EADoB,EACpBA,MACXL,EAAU,2BACHD,GADE,kBAEJK,EAAOC,MAQhB,OACI,yBAAKd,UAAU,UACX,0BAAMe,aAAa,MAAMC,SAPP,SAAAL,GACtBA,EAAEM,iBACFb,EAAMc,UAAUV,KAMR,2BAAOW,IAAI,QAAX,aACA,2BAAOC,SAAUV,EAAqBG,KAAK,QAAQQ,KAAK,OAAQP,MAAON,EAAOF,QAAQ,6BACtF,2BAAOa,IAAI,SAAX,SACA,2BAAOC,SAAUV,EAAqBG,KAAK,SAASQ,KAAK,QAAQP,MAAON,EAAOD,SAC/E,4BAAQc,KAAK,UAAb,uB,gBCdDC,E,OAFFC,EAASC,cAXD,CACjBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKGC,WAAWC,MCqBlBC,EA/BF,WAUT,OACI,yBAAKnC,UAAU,QACX,+BACI,4BACI,kCACA,oCACA,qCACA,uCAEJ,4BACI,kCACA,yCACA,+CACA,4BAAI,kBAAC,IAAD,kBAGZ,kBAAC,EAAD,CAAQkB,UAzBE,SAAAkB,GACdC,EAAWC,MAAM,YAAYC,KACzBH,GACA,SAAAI,GACQA,GACJC,QAAQC,IAAIF,WCoBbG,MAxBf,WACE,OACE,yBAAK3C,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO4C,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,sCAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCZIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.ca4a756b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"Header__Nav\">\r\n            <nav className=\"Header__Menu\">\r\n                <ul>\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li><Link to=\"/insert\">Insert</Link></li>\r\n                    <li><Link to=\"/view\">View</Link></li>\r\n                    <li><Link to=\"/login\">Logout</Link></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport './Home.css';\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"Home\">\r\n            <h1>Welcome to Data insert Page.</h1>\r\n            <p>Pleace click the Button and insert the data</p>\r\n            <Link to='/Insert'><button>+ Add Data To List</button></Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { useState } from 'react';\r\nimport './Insert.css';\r\n\r\nconst Insert = (props) => {\r\n    const initialFieldValues = {\r\n        fname: '',\r\n        fphone: ''\r\n    }\r\n\r\n    var [Values, setValues] = useState(initialFieldValues)\r\n\r\n    const handlerInputChangle = (e) => {\r\n        var {name, value} = e.target\r\n        setValues({\r\n            ...Values,\r\n            [name]: value\r\n        })\r\n    }\r\n    const handlerFormSubmit = e => {\r\n        e.preventDefault();\r\n        props.addOrEdit(Values)\r\n    }\r\n\r\n    return(\r\n        <div className=\"Insert\">\r\n            <form autoComplete=\"off\" onSubmit={handlerFormSubmit}>\r\n                <label for=\"name\">Full Name</label>\r\n                <input onChange={handlerInputChangle} name=\"fname\" type=\"name\"  value={Values.fname}/><br/>\r\n                <label for=\"phone\">Phone</label>\r\n                <input onChange={handlerInputChangle} name=\"fphone\" type=\"phone\" value={Values.fphone}/>\r\n                <button type=\"submit\">Add To Database</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default Insert;","import firebase from 'firebase';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCE16LFP9_GUrLQVaWqcZnDYmG_qT9nXMI\",\r\n    authDomain: \"todo-app-9a443.firebaseapp.com\",\r\n    databaseURL: \"https://todo-app-9a443.firebaseio.com\",\r\n    projectId: \"todo-app-9a443\",\r\n    storageBucket: \"todo-app-9a443.appspot.com\",\r\n    messagingSenderId: \"851482973864\",\r\n    appId: \"1:851482973864:web:5d00bd47534681aefa549d\",\r\n    measurementId: \"G-5X2KF68X5X\"\r\n};\r\n// Initialize Firebase\r\nvar fireDB = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default fireDB.database().ref();","import React from 'react';\r\nimport './View.css';\r\nimport { Link } from 'react-router-dom';\r\nimport firebaseDB from './farebase';\r\nimport Insert from './Insert';\r\n\r\nconst View = () => {\r\n    const addOrEdit = obj => {\r\n        firebaseDB.child('userlist').push(\r\n            obj,\r\n            err => {\r\n                if (err)\r\n                console.log(err)\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"View\">\r\n            <table>\r\n                <tr>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Phone</th>\r\n                    <th>Action</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>01</td>\r\n                    <td>Mr. Rafik</td>\r\n                    <td>+8801750-717109</td>\r\n                    <td><Link>Delete</Link></td>\r\n                </tr>\r\n            </table>\r\n            <Insert addOrEdit={addOrEdit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default View\r\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route  } from 'react-router-dom';\nimport Header from './Header';\nimport Home from './Home';\nimport Insert from './Insert';\nimport View from './View';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n          <Switch>\n              <Route path=\"/view\">\n                <View />\n              </Route>\n              <Route path=\"/insert\">\n                <Insert />\n              </Route>\n              <Route path=\"/login\">\n                <h1>Login</h1>\n              </Route>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n          </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}